# there are 4 different structures
# 1. provider 2. functions 3. plugins 4. resources

service:
  name: serverless-grateful-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:

  # tracing:
  #   lambda: true
  #   apiGateway: true

  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    GRATEFULS_TABLE: Gratefuls-${self:provider.stage} # go to provider section and find stage variable
    INDEX_NAME: GratefulIdIndex
    GRATEFUL_S3_BUCKET: gratefuls-severless-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300 # amount of time that allows uer to use the link before it expires

  # ✔️ REVIEW: The images are being uploaded but you would also have to update the attachmentUrl for the todo in oder for the image to be shown with the todo.
  # iamRoleStatements:
  # - Effect: Allow
  #   Action:
  #     - xray:PutTelemetryRecords
  #     - xray:PutTraceSegments
  #   Resource: "*"
  # - Effect: Allow
  #   Action:
  #     - dynamodb:Scan
  #     - dynamodb:PutItem
  #     - dynamodb:GetItem
  #     - dynamodb:UpdateItem
  #     - dynamodb:DeleteItem
  #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GRATEFULS_TABLE}   
  # - Effect: Allow
  #   Action:
  #     - s3:PutObject
  #     - s3:GetObject
  #   Resource: arn:aws:s3:::${self:provider.environment.GRATEFUL_S3_BUCKET}/*

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos: # lambda func name
    handler: src/lambda/http/getTodos.handler # specifies path of func
    events: # invoke the func
      - http:
          method: get # specifies method request
          path: todos # to following resource
          cors: true # fix problems of request
    iamRoleStatements: # allows iam permission of what actions can be done in dynamoodb
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GRATEFULS_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem # can post/create
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GRATEFULS_TABLE}


  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem # can update
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GRATEFULS_TABLE}
    

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem # can delete
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GRATEFULS_TABLE}

  # TODO: Configure this function
  GenerateUrl:
    handler: src/lambda/http/generateUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GRATEFULS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.GRATEFUL_S3_BUCKET}/*

resources:
  Resources:
    # TODO: Add any necessary AWS resources    
    # suggested dynamodb resource from readme
    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GRATEFULS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.GRATEFUL_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # allow anyone to get objects from s3 bucket (error can be ignored below)
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.GRATEFUL_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket